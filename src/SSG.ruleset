<?xml version="1.0" encoding="utf-8"?>
<RuleSet Name="SSG" Description="SSG Rules" ToolsVersion="14.0">
  <Rules AnalyzerId="AsyncUsageAnalyzers" RuleNamespace="AsyncUsageAnalyzers">
    <Rule Id="UseConfigureAwait" Action="Warning" />
  </Rules>
  <Rules AnalyzerId="Microsoft.Analyzers.ManagedCodeAnalysis" RuleNamespace="Microsoft.Rules.Managed">
    <!-- PLEASE KEEP THESE ORDERED -->
  </Rules>
  <Rules AnalyzerId="StyleCop.Analyzers" RuleNamespace="StyleCop.Analyzers">
    <!-- PLEASE KEEP THESE ORDERED -->
    <Rule Id="SA1303" Action="None">
      <Explanation>
        <![CDATA[
        .NET doesn't distinguish between static/const/instance members based on casing. Casing is only
        used to signify private vs non-private per official guidelines. This actually loads different 
        purposes to member casing on .NET and confuses the programmer.
        
        An example would be that if we access a member with CapitalCasing it can mean either we're 
        accessing a public member or a private static/const which would confuse the programmer about
        accessibility. Instead use casing only to signify accessibility: camelCase for private, CapitalCase
        for internal/protected/public member types.
        ]]>
      </Explanation>
    </Rule>
    <Rule Id="SA1300" Action="None">
      <Explanation>
        <![CDATA[
        .NET doesn't distinguish between static/const/instance members based on casing. Casing is only
        used to signify private vs non-private per official guidelines. This actually loads different 
        purposes to member casing on .NET and confuses the programmer.
        
        An example would be that if we access a member with CapitalCasing it can mean either we're 
        accessing a public member or a private static/const which would confuse the programmer about
        accessibility. Instead use casing only to signify accessibility: camelCase for private, CapitalCase
        for internal/protected/public member types.
        ]]>
      </Explanation>
    </Rule>
    <Rule Id="SA1101" Action="None">
      <Explanation>
        <![CDATA[
        The way classes provide scoping actually makes the code more readable than the potential confusion
        caused by instance or static member accesses, which shouldn't be a problem when the logic is
        contained within a class.
        ]]>
      </Explanation>
    </Rule>
  </Rules>
</RuleSet>